import React, {useState} from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  TextInput,
  Alert,
  ActivityIndicator,
  Clipboard,
} from 'react-native';
import {SafeAreaView} from 'react-native-safe-area-context';
import Icon from 'react-native-vector-icons/MaterialIcons';

interface AnalysisResult {
  type: string;
  title: string;
  content: string;
  timestamp: string;
}

const AnalysisScreen: React.FC = () => {
  const [selectedRoom, setSelectedRoom] = useState<string>('');
  const [analysisType, setAnalysisType] = useState<string>('comprehensive');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [results, setResults] = useState<AnalysisResult[]>([]);

  const analysisTypes = [
    { id: 'comprehensive', title: 'Ï¢ÖÌï© Î∂ÑÏÑù', icon: 'assessment' },
    { id: 'sentiment', title: 'Í∞êÏ†ï Î∂ÑÏÑù', icon: 'mood' },
    { id: 'keywords', title: 'ÌÇ§ÏõåÎìú Ï∂îÏ∂ú', icon: 'label' },
    { id: 'topics', title: 'ÌÜ†ÌîΩ Î∂ÑÏÑù', icon: 'topic' },
  ];

  const chatRooms = [
    'ÎØ∏Íµ≠ ÌôçÏΩ© ÎèÖÏùº ÏòÅÍµ≠ Ï§ëÍµ≠ ÌïúÍµ≠ ÏÑ±ÏßÅÏûêÎ∞©',
    'ÌîÑÎ°úÏ†ùÌä∏ ÌåÄ Ï±ÑÌåÖ',
    'Í∞ÄÏ°± Îã®ÌÜ°Î∞©',
  ];

  const startAnalysis = async () => {
    if (!selectedRoom) {
      Alert.alert('ÏïåÎ¶º', 'Î∂ÑÏÑùÌï† Ï±ÑÌåÖÎ∞©ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setIsAnalyzing(true);

    try {
      // Ïã§Ï†úÎ°úÎäî ÏÑúÎ≤Ñ API Ìò∏Ï∂ú
      await new Promise(resolve => setTimeout(resolve, 3000));

      const mockResult: AnalysisResult = {
        type: analysisType,
        title: analysisTypes.find(t => t.id === analysisType)?.title || 'Î∂ÑÏÑù',
        content: generateMockAnalysis(analysisType),
        timestamp: new Date().toLocaleString('ko-KR'),
      };

      setResults(prev => [mockResult, ...prev]);
      Alert.alert('ÏôÑÎ£å', 'GPT Î∂ÑÏÑùÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!');
    } catch (error) {
      Alert.alert('Ïò§Î•ò', 'GPT Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const generateMockAnalysis = (type: string): string => {
    const analyses = {
      comprehensive: `üìä **Ï¢ÖÌï© Î∂ÑÏÑù Í≤∞Í≥º**

**ÎåÄÌôî Ìå®ÌÑ¥:**
- ÌôúÎ∞úÌïú ÌÜ†Î°†Ïù¥ Ïù¥Î£®Ïñ¥ÏßÄÎäî Ï±ÑÌåÖÎ∞©ÏûÖÎãàÎã§
- Ï£ºÎ°ú Ïò§ÌõÑ 7-9ÏãúÏóê Í∞ÄÏû• ÌôúÎ∞úÌïú ÎåÄÌôîÍ∞Ä ÏßÑÌñâÎê©ÎãàÎã§
- ÌèâÍ∑† Î©îÏãúÏßÄ Í∏∏Ïù¥: 47Ïûê

**Ï£ºÏöî ÌäπÏßï:**
- Ï†ïÎ≥¥ Í≥µÏú†Í∞Ä ÌôúÎ∞úÌï®
- Í∏çÏ†ïÏ†ÅÏù∏ Î∂ÑÏúÑÍ∏∞ Ïú†ÏßÄ
- Îã§ÏñëÌïú Ï£ºÏ†úÏóê ÎåÄÌïú ÌÜ†Î°†

**Ï∞∏Ïó¨ÎèÑ:**
- Î™®Îì† Ï∞∏Ïó¨ÏûêÍ∞Ä Í≥†Î•∏ Ï∞∏Ïó¨ÎèÑÎ•º Î≥¥ÏûÑ
- ÏßàÎ¨∏-ÎãµÎ≥Ä Ìå®ÌÑ¥Ïù¥ ÏûêÏ£º Í¥ÄÏ∞∞Îê®`,

      sentiment: `üòä **Í∞êÏ†ï Î∂ÑÏÑù Í≤∞Í≥º**

**Ï†ÑÏ≤¥ Í∞êÏ†ï Î∂ÑÌè¨:**
- Í∏çÏ†ï: 65%
- Ï§ëÎ¶Ω: 25% 
- Î∂ÄÏ†ï: 10%

**Ï£ºÏöî Í∞êÏ†ï ÌÇ§ÏõåÎìú:**
- Í∏çÏ†ï: Ï¢ãÎã§, Í∞êÏÇ¨, ÏµúÍ≥†, ÌõåÎ•≠
- Î∂ÄÏ†ï: ÏïÑÏâΩÎã§, Í±±Ï†ï, ÌûòÎì§Îã§

**ÏãúÍ∞ÑÎåÄÎ≥Ñ Í∞êÏ†ï Î≥ÄÌôî:**
- Ïò§Ï†Ñ: Ï§ëÎ¶ΩÏ†Å
- Ïò§ÌõÑ: Í∏çÏ†ïÏ†Å
- Ï†ÄÎÖÅ: Îß§Ïö∞ Í∏çÏ†ïÏ†Å`,

      keywords: `üè∑Ô∏è **ÌÇ§ÏõåÎìú Ï∂îÏ∂ú Í≤∞Í≥º**

**ÎπàÎèÑÏàò Top 10:**
1. ÌöåÏùò (45Ìöå)
2. ÌîÑÎ°úÏ†ùÌä∏ (32Ìöå)
3. ÏùºÏ†ï (28Ìöå)
4. ÌôïÏù∏ (25Ìöå)
5. Í∞êÏÇ¨ (22Ìöå)
6. ÏßÑÌñâ (19Ìöå)
7. ÏôÑÎ£å (17Ìöå)
8. Í≥µÏú† (15Ìöå)
9. Ï∞∏ÏÑù (13Ìöå)
10. Í≤ÄÌÜ† (11Ìöå)

**Ï£ºÏöî ÌÜ†ÌîΩ:**
- ÏóÖÎ¨¥ Í¥ÄÎ†®: 60%
- ÏùºÏÉÅ ÎåÄÌôî: 25%
- Ï†ïÎ≥¥ Í≥µÏú†: 15%`,

      topics: `üìà **ÌÜ†ÌîΩ Î∂ÑÏÑù Í≤∞Í≥º**

**Ï£ºÏöî ÌÜ†ÌîΩ (LDA Î™®Îç∏ÎßÅ):**

**ÌÜ†ÌîΩ 1: ÏóÖÎ¨¥ ÏßÑÌñâ (35%)**
- ÌÇ§ÏõåÎìú: ÌöåÏùò, ÏùºÏ†ï, ÏßÑÌñâ, ÏôÑÎ£å
- ÏÑ§Î™Ö: ÌîÑÎ°úÏ†ùÌä∏ ÏßÑÌñâ ÏÉÅÌô© ÎÖºÏùò

**ÌÜ†ÌîΩ 2: Ï†ïÎ≥¥ Í≥µÏú† (30%)**  
- ÌÇ§ÏõåÎìú: Í≥µÏú†, ÌôïÏù∏, ÏûêÎ£å, ÎßÅÌÅ¨
- ÏÑ§Î™Ö: Ï†ïÎ≥¥ Î∞è ÏûêÎ£å Í≥µÏú†

**ÌÜ†ÌîΩ 3: ÏùºÏÉÅ ÎåÄÌôî (25%)**
- ÌÇ§ÏõåÎìú: ÏïàÎÖï, ÏàòÍ≥†, Í∞êÏÇ¨, Ïò§Îäò
- ÏÑ§Î™Ö: Ïù∏ÏÇ¨ Î∞è ÏùºÏÉÅÏ†Å ÏÜåÌÜµ

**ÌÜ†ÌîΩ 4: ÏùºÏ†ï Ï°∞Ïú® (10%)**
- ÌÇ§ÏõåÎìú: ÏãúÍ∞Ñ, Ï∞∏ÏÑù, Í∞ÄÎä•, Ïñ∏Ï†ú
- ÏÑ§Î™Ö: Ïä§ÏºÄÏ§Ñ Ï°∞Ïú® Î∞è ÏïΩÏÜç`
    };

    return analyses[type as keyof typeof analyses] || 'Î∂ÑÏÑù Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.';
  };

  const copyToClipboard = (content: string) => {
    Clipboard.setString(content);
    Alert.alert('Î≥µÏÇ¨ ÏôÑÎ£å', 'Î∂ÑÏÑù Í≤∞Í≥ºÍ∞Ä ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§.');
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContent}>
        <View style={styles.header}>
          <Icon name="psychology" size={48} color="#007AFF" />
          <Text style={styles.title}>ü§ñ GPT Î∂ÑÏÑù</Text>
          <Text style={styles.subtitle}>
            AIÎ•º ÌôúÏö©Ìïú Ï±ÑÌåÖ ÎÇ¥Ïö© Î∂ÑÏÑù Î∞è Ïù∏ÏÇ¨Ïù¥Ìä∏ ÎèÑÏ∂ú
          </Text>
        </View>

        <View style={styles.analysisForm}>
          <Text style={styles.sectionTitle}>Ï±ÑÌåÖÎ∞© ÏÑ†ÌÉù</Text>
          <View style={styles.roomSelector}>
            {chatRooms.map((room, index) => (
              <TouchableOpacity
                key={index}
                style={[
                  styles.roomOption,
                  selectedRoom === room && styles.selectedRoom,
                ]}
                onPress={() => setSelectedRoom(room)}
              >
                <Icon 
                  name="chat" 
                  size={16} 
                  color={selectedRoom === room ? '#fff' : '#666'} 
                />
                <Text 
                  style={[
                    styles.roomText,
                    selectedRoom === room && styles.selectedRoomText,
                  ]}
                  numberOfLines={1}
                >
                  {room}
                </Text>
              </TouchableOpacity>
            ))}
          </View>

          <Text style={styles.sectionTitle}>Î∂ÑÏÑù Ïú†Ìòï</Text>
          <View style={styles.analysisTypes}>
            {analysisTypes.map((type) => (
              <TouchableOpacity
                key={type.id}
                style={[
                  styles.typeOption,
                  analysisType === type.id && styles.selectedType,
                ]}
                onPress={() => setAnalysisType(type.id)}
              >
                <Icon 
                  name={type.icon} 
                  size={20} 
                  color={analysisType === type.id ? '#fff' : '#007AFF'} 
                />
                <Text 
                  style={[
                    styles.typeText,
                    analysisType === type.id && styles.selectedTypeText,
                  ]}
                >
                  {type.title}
                </Text>
              </TouchableOpacity>
            ))}
          </View>

          <TouchableOpacity
            style={[styles.analyzeButton, isAnalyzing && styles.disabledButton]}
            onPress={startAnalysis}
            disabled={isAnalyzing}
          >
            {isAnalyzing ? (
              <ActivityIndicator color="#fff" />
            ) : (
              <Icon name="smart-toy" size={24} color="#fff" />
            )}
            <Text style={styles.analyzeButtonText}>
              {isAnalyzing ? 'Î∂ÑÏÑù Ï§ë...' : 'GPT Î∂ÑÏÑù ÏãúÏûë'}
            </Text>
          </TouchableOpacity>
        </View>

        {results.length > 0 && (
          <View style={styles.resultsSection}>
            <Text style={styles.sectionTitle}>üìã Î∂ÑÏÑù Í≤∞Í≥º</Text>
            {results.map((result, index) => (
              <View key={index} style={styles.resultCard}>
                <View style={styles.resultHeader}>
                  <Text style={styles.resultTitle}>{result.title}</Text>
                  <TouchableOpacity
                    onPress={() => copyToClipboard(result.content)}
                    style={styles.copyButton}
                  >
                    <Icon name="content-copy" size={20} color="#007AFF" />
                  </TouchableOpacity>
                </View>
                <Text style={styles.resultTimestamp}>{result.timestamp}</Text>
                <ScrollView style={styles.resultContent} nestedScrollEnabled>
                  <Text style={styles.resultText}>{result.content}</Text>
                </ScrollView>
              </View>
            ))}
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollContent: {
    padding: 20,
  },
  header: {
    alignItems: 'center',
    marginBottom: 30,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
    marginTop: 10,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    marginTop: 8,
    textAlign: 'center',
    lineHeight: 22,
  },
  analysisForm: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: {width: 0, height: 2},
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 15,
  },
  roomSelector: {
    marginBottom: 20,
  },
  roomOption: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    borderRadius: 8,
    backgroundColor: '#f8f9fa',
    marginBottom: 8,
    borderWidth: 1,
    borderColor: '#e9ecef',
  },
  selectedRoom: {
    backgroundColor: '#007AFF',
    borderColor: '#007AFF',
  },
  roomText: {
    marginLeft: 8,
    fontSize: 14,
    color: '#666',
    flex: 1,
  },
  selectedRoomText: {
    color: '#fff',
  },
  analysisTypes: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 10,
    marginBottom: 20,
  },
  typeOption: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    borderRadius: 8,
    backgroundColor: '#f0f8ff',
    borderWidth: 1,
    borderColor: '#007AFF',
    minWidth: '45%',
  },
  selectedType: {
    backgroundColor: '#007AFF',
  },
  typeText: {
    marginLeft: 8,
    fontSize: 14,
    color: '#007AFF',
    fontWeight: '500',
  },
  selectedTypeText: {
    color: '#fff',
  },
  analyzeButton: {
    backgroundColor: '#34C759',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 16,
    borderRadius: 8,
  },
  disabledButton: {
    backgroundColor: '#ccc',
  },
  analyzeButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
    marginLeft: 8,
  },
  resultsSection: {
    marginBottom: 20,
  },
  resultCard: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: {width: 0, height: 2},
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  resultHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  resultTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    flex: 1,
  },
  copyButton: {
    padding: 4,
  },
  resultTimestamp: {
    fontSize: 12,
    color: '#666',
    marginBottom: 12,
  },
  resultContent: {
    maxHeight: 200,
  },
  resultText: {
    fontSize: 14,
    color: '#333',
    lineHeight: 20,
  },
});

export default AnalysisScreen; 